/**********************************************************************************************************************************************************
	File:				SEEQ_subroutines.txt
	Purpose:			Extract, Transform and Load tables as specified in the table specified by the variable vRulesSourceFile.
						Subroutines in this file are called from SEEQ_include.txt
	
	Author:			Jeff R. Robbins
	Author email:		jrs@qlik.com; jr@qlikperf.com
	
	Version:	3.1.1
	Date:		2017-12-15
	
	This program is provided in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
**********************************************************************************************************************************************************/

/******************************************************************************************************************************************/
Sub ExcludeFieldsInit
	SET vExcludeFields='';
	IF vSEEQ_Fields = 'EXCLUDE_SUBSET' THEN 
			ExcludeFields:
			LOAD 
				DISTINCT Field AS ExcludeFields
			FROM	[$(vRulesSourceFile)]	($(vSEEQ_XLSFormat), embedded labels, table is EXCLUDE_FIELDS$(vSEEQ_XLSDollar))
			WHERE $(vSEEQ_GetThisRuleLine)
			;
			ExcludeFieldsConcat:
			LOAD 
				Concat (DISTINCT ExcludeFields, ', ') AS ExcludeFieldsConcat	
			Resident ExcludeFields;
	ENDIF
END SUB			// ExcludeFieldsInit
/******************************************************************************************************************************************/
sub ExcludeFields
//	IF upper(vPurpose) = 'EXTRACT' THEN	
//		LET vExcludeFields = peek('ExcludeFields', 0, 'ExcludeFields');
//		IF upper(vPurpose) = 'EXTRACT' AND vSEEQ_Fields = 'EXCLUDE_SUBSET' AND len('$(vExcludeFields)' ) > 0 AND upper(vSEEQ_Mode)='GENERATE AND EXECUTE'  THEN		
//		// exclude fields are specified in vRulesSourceFile
//			DROP Fields $(vExcludeFields) FROM $(vSEEQ_Target);
//		ENDIF
//	ENDIF
	IF upper(vPurpose) = 'EXTRACT' THEN	
		LET vExcludeFields = peek('ExcludeFields', 0, 'ExcludeFields');
		IF upper(vPurpose) = 'EXTRACT' AND vSEEQ_Fields = 'EXCLUDE_SUBSET' AND len('$(vExcludeFields)' ) > 0  THEN		
		// exclude fields are specified in vRulesSourceFile
		SET vSEEQ_DropExcludedFieldsStatement='DROP Fields $(vExcludeFields) FROM $(vSEEQ_Target)$(vSEEQ_Semicolon)';
		ENDIF
	ENDIF
end sub	// ExcludeFields
/******************************************************************************************************************************************/
sub IncludeFields
	IF upper(vPurpose) = 'EXTRACT' AND upper(vSEEQ_Fields) = 'INCLUDE_SUBSET' THEN	
	// INCLUDE_FIELD processing for TRANSFORM is handled by the TranformFields procedure, farther below
			IncludeField:
//			LOAD 	DISTINCT Order, Field AS IncludeField		// 2016-10-25 JRR added Order field.
			LOAD 	DISTINCT Field AS IncludeField, RowNo() AS Order		// 2016-11-10 JRR added RowNo() AS Order.
			FROM	[$(vRulesSourceFile)] 	($(vSEEQ_XLSFormat), embedded labels, table is INCLUDE_FIELDS$(vSEEQ_XLSDollar))
			WHERE purgechar([Target], ' -	') = '$(vSEEQ_TargetWithoutBrackets)'	AND upper(ENABLED) ='Y';

			IncludeFields:
			LOAD   Concat (DISTINCT IncludeField, ', ' & chr(10), Order ) & chr(10)  AS IncludeFields RESIDENT IncludeField;
			drop Table IncludeField;		
			LET vSEEQ_FieldsExpansion = peek('IncludeFields', 0, 'IncludeFields');
			drop Table IncludeFields;					

			IF len ( trim (vSEEQ_FieldsExpansion) ) < 1 THEN	
				CALL SEEQ_WriteMessage('Fields = INCLUDE_SUBSET. However, no ENABLED rows for $(vSEEQ_TargetWithoutBrackets) were found in the INCLUDE_FIELDS sheet of $(vRulesSourceFile).');
				CALL SEEQ_WriteMessage('Switching to all fields (*)');
				SET vSEEQ_FieldsExpansion = '*';
			ENDIF
		ENDIF
end sub	// IncludeFields			
///******************************************************************************************************************************************/
sub TransformFields 
	IF upper(vPurpose) = 'TRANSFORM' THEN
		SET vSEEQ_FieldsExpansion = '';	// for TRANSFORM, we discard vSEEQ_FieldsExpansion as used by EXTRACT.
	
		TargetFields:
		LOAD 	DISTINCT 
				$(vSEEQ_TargetKey) AS SEEQ_TargetKey,
				[Target Field Definition],
				PurgeChar([Target Field Name],'[]')  AS [Target Field Name], 		//2014-09-28 JRR added PurgeChar to removed square brackets
				if (IsNull([Field Order]), 99, [Field Order] )	AS [EEE Field Order],	// sort last (99) if field order is not specified
				'TRANSFORM_FIELDS' AS [Source XLS Sheet]
		FROM	[$(vRulesSourceFile)] 	($(vSEEQ_XLSFormat), embedded labels, table is TRANSFORM_FIELDS$(vSEEQ_XLSDollar))
		WHERE $(vSEEQ_GetThisRuleLine);

		// If the transform source is an External file (CSV, XLS, etc), we need to create a proxy QVD of the source, so 
		// that we can read field information from the header of that proxy QVD.  This use of the proxy QVD eliminates 
		// the need to have transform logic for both QVD and External file types; we can use a single set of logic:
		IF vSEEQ_SourceType = 'EXTERNAL' THEN
			CAll SEEQ_WriteProxyQVD;		
		ENDIF

		IF vSEEQ_SourceType = 'EXTERNAL' THEN
			LET  vSEEQ_XML_QVD_Target = replace (vSEEQ_TmpProxyTable, '(qvd)', '(XmlSimple, Table is [QvdTableHeader/Fields/QvdFieldHeader])');
			SET vSEEQ_TmpProxyTable='';
		ELSE 	// QVD
			LET  vSEEQ_XML_QVD_Target = replace (vSEEQ_Source, '(qvd)', '(XmlSimple, Table is [QvdTableHeader/Fields/QvdFieldHeader])');
		ENDIF

		CALL SEEQ_TransformIncludeSubset;
		
		Concatenate (TargetFields) LOAD 	DISTINCT 
			$(vSEEQ_TargetKey) AS SEEQ_TargetKey,
			'[' & replace([Target Field Name Tmp], '_original', '') & ']' AS 	[Target Field Definition],
			[Target Field Name Tmp]  AS [Target Field Name], 	
			RowNo()+1000 AS [EEE Field Order],	// RowNo will preserve line ordering from the XLS worksheekt, ordering needed for MAPPING tables.  We add 1000 to sort after rules from TRANFORM_FIELDS worksheet
//			99 AS [EEE Field Order],	// sort last (99) if field order is not specified
			[Source XLS Sheet]
		Resident TargetFieldsTmp;

		DROP Table 		TargetFieldsTmp;

		TargetFields2:
		LOAD  
			*,
			[Target Field Definition] & ' AS ' & '[' &  [Target Field Name] & ']' AS [Target Field Script Line]
		Resident TargetFields
		Order BY [EEE Field Order]; 
		
		DROP Table TargetFields; RENAME Table TargetFields2 TO TargetFields;

		AddFields:
			NoConcatenate
			LOAD
 				 chr(10) & Concat ('     ' & [Target Field Script Line], ', ' & chr(10),  [EEE Field Order]) & chr(10) AS AddFields
 			Resident TargetFields;

			LET vSEEQ_FieldsExpansion = ' ' & peek('AddFields', 0, 'AddFields');//  & ', ';
		
			IF len ( trim (vSEEQ_FieldsExpansion) ) < 1 THEN	// No fields are specified for the current target.
				SET vSEEQ_FieldsExpansion = '*';
				IF upper(vSEEQ_Fields) = 'INCLUDE_SUBSET'	THEN
					CALL SEEQ_WriteMessage('Fields = INCLUDE_SUBSET. However, no ENABLED rows for $(vSEEQ_TargetWithoutBrackets) were found in the INCLUDE_FIELDS or TRANSFORM_FIELDS sheets of $(vRulesSourceFile).');	
					CALL SEEQ_WriteMessage('Switching to all fields (*)');
				ENDIF
			ENDIF
			//Trace $(vSEEQ_FieldsExpansion);
	ENDIF	
END SUB	//  TransformFields
///******************************************************************************************************************************************/
sub MetaData 
	IF upper(vPurpose) ='TRANSFORM' THEN
//----
/*
			[$(vSEEQ_OuterLoopCounter)_Comment_Map]:		// we need a comment and tag map for each target QVD. a (table number) makes each one separate.
			Mapping 
			LOAD 
				[Target Field Name] AS [Target Field Name2],   replace([Target Field Definition] , '&', ' AND ') AS Comment // '$(vSEEQ_SourceOriginal)' & '.' &
			  Resident TargetFields;
			Comment Fields USING [$(vSEEQ_OuterLoopCounter)_Comment_Map];
*/
//----	
/*
			[$(vSEEQ_OuterLoopCounter)_Tag_Map]:
			Mapping 
			LOAD 
			[Target Field Name] AS [Target Field Name3], '$dimension'  AS Tag 
			  Resident TargetFields;
			TAG Fields USING [$(vSEEQ_OuterLoopCounter)_Tag_Map];
*/

	Comment Table '$(vSEEQ_Target)' With  'Created from $(vSEEQ_SourceOriginal) by $(vApp) $(vPurpose).';
	
	DROP Table TargetFields, AddFields; 

	ENDIF
END SUB	// MetaData
/******************************************************************************************************************************************/
sub SEEQ_WriteMessage(vSEEQ_MessageToWrite)
				SET vSEEQ_Messages=$(vSEEQ_Messages)$(vSEEQ_linefeed) $(vSEEQ_MessageToWrite);
endsub
/******************************************************************************************************************************************/
sub SEEQ_WriteProxyQVD
		// If the transform source is an External file (CSV, XLS, etc), we need to create a proxy QVD of the source, so 
		// that we can read field information from the header of that proxy QVD.  This use of the proxy QVD eliminates 
		// the need to have transform logic for both QVD and External file types; we can use a single set of logic for both.
			TmpProxyTable:
			First 100 LOAD * FROM $(vSEEQ_Source);
			STORE TmpProxyTable INTO  [$(vSEEQ_TargetFolder)$(vSEEQ_SourceOriginal)_SEEQ_tmp.qvd] (qvd);		// This line causes terse  "END SUB" or "Script line error" error on some systems. 
			DROP Table TmpProxyTable;
			SET vSEEQ_TmpProxyTable = [$(vSEEQ_TargetFolder)$(vSEEQ_SourceOriginal)_SEEQ_tmp.qvd] (qvd);		// This line causes terse  "END SUB" or "Script line error" error on some systems. 
ENDSUB
/******************************************************************************************************************************************/
sub SEEQ_TransformIncludeSubset
		IF upper(vSEEQ_Fields) = 'INCLUDE_SUBSET'	THEN
			TargetFieldsTmp:
			LOAD Field 	   AS [Target Field Name Tmp], 'INCLUDE_FIELDS' AS [Source XLS Sheet]
			FROM	[$(vRulesSourceFile)] 	($(vSEEQ_XLSFormat), embedded labels, table is INCLUDE_FIELDS$(vSEEQ_XLSDollar))
			WHERE $(vSEEQ_GetThisRuleLine) and 	NOT exists ([Target Field Name], Field);

			// comment the following 3 lines to exclude unmodified original fields (tagged with '_original' in the case where there is name duplication: 
//			LOAD Field 	&'_original'   AS [Target Field Name Tmp], 'INCLUDE_FIELDS' AS [Source XLS Sheet]	
//			FROM	$(vRulesSourceFile) 	($(vSEEQ_XLSFormat), embedded labels, table is INCLUDE_FIELDS$(vSEEQ_XLSDollar))
//			WHERE $(vSEEQ_GetThisRuleLine) and 	exists ([Target Field Name], Field);
		ELSEIF upper(vSEEQ_Fields) = 'ALL' 	 	THEN
			TargetFieldsTmp:
			LOAD FieldName 			   AS [Target Field Name Tmp], 'TABLES (ALL)' AS [Source XLS Sheet]	FROM $(vSEEQ_XML_QVD_Target)		
			WHERE NOT exists ([Target Field Name], FieldName);
			// comment the following line to exclude unmodified original fields (tagged with '_original' in the case where there is name duplication:
			// LOAD FieldName&'_original' AS [Target Field Name Tmp], 'TABLES (ALL)' AS [Source XLS Sheet]	FROM $(vSEEQ_XML_QVD_Target)		WHERE     	exists ([Target Field Name], FieldName); 
		ELSEIF upper(vSEEQ_Fields) = 'EXCLUDE_SUBSET' THEN
			TargetFieldsTmp:
			LOAD FieldName 			   AS [Target Field Name Tmp], 'EXCLUDE_FIELDS' AS [Source XLS Sheet]	FROM $(vSEEQ_XML_QVD_Target)	
			WHERE  NOT EXISTS ([ExcludeFields], FieldName)  AND NOT exists ([Target Field Name], FieldName); 
			// comment the following line to exclude unmodified original fields (tagged with '_original' in the case where there is name duplication:
			// LOAD FieldName&'_original' AS [Target Field Name Tmp], 'TABLES (ALL)' AS [Source XLS Sheet]	FROM $(vSEEQ_XML_QVD_Target)		WHERE     	exists ([Target Field Name], FieldName); 
		ENDIF
ENDSUB		